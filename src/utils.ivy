#lang ivy1.8

# Holds fundamental type definitions that don't make sense
# to reside anywhere else just yet.

include collections

global {

    instance node : iterable

    type elem
    interpret elem -> bv[3]

    # A tuple type is the data structure laid out in tablets in storage nodes.
    # These are returned to clients on lookup operations.
    instance tuple : vector(elem)

    # A tuple template is used to specify a query where not every value is filled
    # out: a wildcard is encoded by an empty option and "materialised" into
    # concrete values on lookups.
    instance tuple_template : vector(option[elem])

    # To check a tuple against a template, all non-empty elements in the
    # latter must match the former's corresponding elements.
    function tplchk(Tpl: tuple, Tmp: tuple_template) =
        Tpl.end() = Tmp.end() & forall I. 0 <= I & I < Tmp.end() ->
            # If an element is concretized (nonempty), the values better match.
            (~Tmp.value(I).is_empty -> Tpl.value(I) = Tmp.value(I).contents)
}
